#include <string>
#include <assert.h>
#include "cache.h"
#include "prefetcher.h"

/* Supported prefetchers at L2 */
#include "bop.h"


using namespace std;


// vector<Prefetcher*> prefetchers;

void CACHE::pfb_prefetcher_initialize()
{

		
	cout << "adding pfb_PREFETCHER: BOP" << endl;
	BOPrefetcher *pref_bop = new BOPrefetcher("bop");
	prefetchers.push_back(pref_bop);
	
}

uint32_t CACHE::pfb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
	vector<uint64_t> pref_addr;
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{

		prefetchers[index]->invoke_prefetcher(ip, addr, cache_hit, type, pref_addr);
		for(uint32_t addr_index = 0; addr_index < pref_addr.size(); ++addr_index)
		{
			prefetch_line(ip, addr, pref_addr[addr_index], FILL_PFB, 0);
		}
		
	}

	return metadata_in;
}

uint32_t CACHE::pfb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
	if(prefetch)
	{
		for(uint32_t index = 0; index < prefetchers.size(); ++index)
		{
			if(!prefetchers[index]->get_type().compare("bop"))
			{
				BOPrefetcher *pref_bop = (BOPrefetcher*)prefetchers[index];
				pref_bop->register_fill(addr);
			}
		}
	}

	return metadata_in;
}

uint32_t CACHE::pfb_prefetcher_prefetch_hit(uint64_t addr, uint64_t ip, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::pfb_prefetcher_final_stats()
{
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		prefetchers[index]->dump_stats();
	}
}

void CACHE::pfb_prefetcher_print_config()
{
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		prefetchers[index]->print_config();
	}
}

void CACHE::pfb_prefetcher_broadcast_bw(uint8_t bw_level)
{
}

void CACHE::pfb_prefetcher_broadcast_ipc(uint8_t ipc)
{
}

void CACHE::pfb_prefetcher_broadcast_acc(uint32_t acc_level)
{
}
